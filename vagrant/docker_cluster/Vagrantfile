Vagrant.configure("2") do |config|
    # 定义虚拟机数量
    vms = Array(1..5)
    # 数据盘存放目录
    $data_base_dir = "/data/vm/disk"
    vms.each do |i|
        config.vm.define "docker#{i}" do |docker|
            # 设置虚拟机的Box
            docker.vm.box = "centos/7"
            # 不检查 box 更新
            docker.vm.box_check_update = false 
            # 设置虚拟机的主机名
            docker.vm.hostname="docker#{i}.node"
            # 设置虚拟机的IP (wlp2s0 为桥接本机的网卡)
            docker.vm.network "public_network", ip: "192.168.1.1#{i}", bridge: "wlp2s0"
            # 设置主机与虚拟机的共享目录
            #docker.vm.synced_folder "~/Desktop/share", "/home/vagrant/share"
            # VirtaulBox相关配置
            docker.vm.provider "virtualbox" do |v|
                # 设置虚拟机的名称
                v.name = "docker#{i}"
                # 设置虚拟机的内存大小  
                v.memory = 2048 
                # 设置虚拟机的CPU个数
                v.cpus = 1
                # 增加磁盘
                docker_disk = "#$data_base_dir/docker-disk#{i}.vdi"
                data_disk = "#$data_base_dir/data-disk#{i}.vdi"
                if ARGV[0] == "up"
                    # 如果两个文件都不存在 则创建 SATA 控制器
                    if ! File.exist?(docker_disk) && ! File.exist?(data_disk)
                        v.customize [
                            'storagectl', :id,
                            '--name', 'SATA Controller',
                            '--add', 'sata',
                            '--portcount', '5',
                            '--controller', 'IntelAhci',
                            '--bootable', 'on'
                        ]
                    end
                    # 创建磁盘文件
                    if ! File.exist?(docker_disk)
                        v.customize [
                            'createhd', 
                            '--filename', docker_disk, 
                            '--format', 'VDI', 
                            '--size', 10 * 1024 # 10 GB
                        ] 
                    end
                    if ! File.exist?(data_disk)
                        v.customize [
                            'createhd', 
                            '--filename', data_disk, 
                            '--format', 'VDI', 
                            '--size', 10 * 1024 # 10 GB
                        ] 
                    end
                    # 连接到 SATA 控制器
                    v.customize [
                        'storageattach', :id, 
                        '--storagectl', 'SATA Controller', 
                        '--port', 1, '--device', 0, 
                        '--type', 'hdd', '--medium', 
                        docker_disk
                    ]
                    v.customize [
                        'storageattach', :id, 
                        '--storagectl', 'SATA Controller', 
                        '--port', 2, '--device', 0, 
                        '--type', 'hdd', '--medium', 
                        data_disk
                    ]
                end
            end
            # 增加各节点 host 配置
            config.vm.provision :hosts do |provisioner|
                vms.each do |x|
                    provisioner.add_host "192.168.1.1#{x}", ["docker#{x}.node"]
                end
            end
            # 自定义执行脚本
            docker.vm.provision "shell", path: "init.sh"
            # 每次开机后重启 network 和 ssh，解决公网网卡不启动问题 
            docker.vm.provision "shell", run: "always", inline: <<-SHELL
                systemctl restart network
                ifup eth1 2>&1 > /dev/null
                systemctl restart sshd
                echo -e "\033[32mvirtual machine docker#{i} init success!\033[0m"
            SHELL
        end
    end
end
